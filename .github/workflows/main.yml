name: Generate DocFX Documentation

on:
  push:
    branches:
      - main

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Install DocFX
      run: |
        wget https://github.com/dotnet/docfx/releases/download/v2.58/docfx.zip
        unzip docfx.zip -d ./docfx

    # This step needs to happen before anything else!
    - name: Move everything inside the manual/ folder.
      shell: bash
      run: |
        mkdir -p manual
        if [ -d Documentation~ ] && [ "$(ls -A Documentation~)" ]; then
          mv -v Documentation~/* manual/
        else
          mkdir -p Documentation~
        fi
        mv -v manual Documentation~/manual

    # Generate pages, tables of contents, the docfx.json and anything the docfx needs.

    - name: Generate index page
      shell: bash
      run: echo 'This page redirects to the [manual](manual/).' > Documentation~/index.md

    - name: Generate main Table of Contents
      shell: bash
      run: |
        echo '- name: Manual
          href: manual/
          homepage: manual/index.md
        - name: Scripting API
          href: api/
          homepage: api/index.md' > Documentation~/toc.yml

    - name: Generate manual Table of Contents
      shell: bash
      # Replace * and 5 consecutive spaces with # in the Table of Contents to convert Unity's format to DocFX's format.
      run: |
        if [ -f Documentation~/manual/TableOfContents.md ]; then
          mv Documentation~/manual/TableOfContents.md Documentation~/manual/toc.md
        fi
        if [ -f Documentation~/manual/toc.md ]; then
          sed -i -e 's/*/#/g' Documentation~/manual/toc.md
          sed -i -e 's/     /#/g' Documentation~/manual/toc.md
        fi

    - name: Generate manual index page
      shell: bash
      run: |
        if [ ! -f Documentation~/manual/index.md ] && [ -f README.md ]; then
          cp README.md Documentation~/manual/index.md
        fi

    - name: Generate api index page
      shell: bash
      run: |
        mkdir -p Documentation~/api
        if [ -f Documentation~/api_index.md ]; then
          cp Documentation~/api_index.md Documentation~/api/index.md
          rm Documentation~/api_index.md
        else
          echo 'This is the documentation for the Scripting APIs of this package.' > Documentation~/api/index.md
        fi

    - name: Generate changelog page
      shell: bash
      run: |
        if [ -f CHANGELOG.md ]; then
          mkdir -p Documentation~/changelog
          cp CHANGELOG.md Documentation~/changelog/CHANGELOG.md
          echo '# [Changes](CHANGELOG.md)' > Documentation~/changelog/toc.md
          echo '- name: Changelog' >> Documentation~/toc.yml
          echo '  href: changelog/' >> Documentation~/toc.yml
          echo '  homepage: changelog/CHANGELOG.md' >> Documentation~/toc.yml
        fi

    - name: Generate license page
      shell: bash
      run: |
        if [ -f LICENSE ] && [ ! -f LICENSE.md ]; then
          mv -v LICENSE LICENSE.md
        fi
        if [ -f LICENSE.md ]; then
          mkdir -p Documentation~/license
          cp LICENSE.md Documentation~/license/LICENSE.md
          echo '# [License](LICENSE.md)' > Documentation~/license/toc.md
          if [ -f 'Third Party Notices.md' ]; then
            cp 'Third Party Notices.md' 'Documentation~/license/Third Party Notices.md'
            sed -i '1i# [Third Party Notices](Third Party Notices.md)' Documentation~/license/toc.md
          fi
          echo '- name: License' >> Documentation~/toc.yml
          echo '  href: license/' >> Documentation~/toc.yml
          echo '  homepage: license/LICENSE.md' >> Documentation~/toc.yml
        fi

    - name: Read package.json
      shell: bash
      run: |
        if [ -f package.json ]; then
          content=`cat package.json`
        else
          content='{}'
        fi
        echo 'package<<EOF' >> $GITHUB_ENV
        echo $content >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Check for docfx.json
      run: |
        if [ ! -f docfx_project/docfx.json ]; then
          mkdir -p docfx_project
          echo '{
            "metadata": [
              {
                "src": [
                  {
                    "files": [
                      "**/*.cs",
                      "**/*.md"
                    ],
                    "exclude": [
                      "**/obj/**",
                      "**/bin/**"
                    ],
                    "src": "./"
                  }
                ],
                "dest": "api"
              }
            ],
            "build": {
              "content": [
                {
                  "files": [
                    "**/*.md"
                  ],
                  "src": "./",
                  "dest": "_site/docs",
                  "exclude": [
                    "**/obj/**",
                    "**/bin/**"
                  ]
                },
                {
                  "files": [
                    "api/**.yml"
                  ],
                  "src": "./",
                  "dest": "_site/api",
                  "exclude": [
                    "**/obj/**",
                    "**/bin/**"
                  ]
                }
              ],
              "resource": [
                {
                  "files": [
                    "images/**"
                  ],
                  "src": "./",
                  "dest": "_site/images"
                }
              ],
              "globalMetadata": {
                "_appTitle": "Unity Logger Public Documentation"
              },
              "template": [
                "default"
              ],
              "dest": "_site"
            }
          }' > docfx_project/docfx.json
        fi

    - name: Generate Documentation
      run: |
        chmod +x ./docfx/docfx.exe
        mono ./docfx/docfx.exe build docfx_project/docfx.json

    - name: List DocFX output
      run: ls -R docfx_project/_site

    - name: List output directory
      run: ls docfx_project/_site

    - name: Echo contents of _site before deployment
      run: ls -R docfx_project/_site
      
    - name: Deploy to Github Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: docfx_project/_site
